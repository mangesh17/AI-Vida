name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: aivida-gke-dev
  GKE_ZONE: us-central1
  IMAGE_NAME: aivida-backend

jobs:
  # Security and Code Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        flake8 src/ --max-line-length=88 --exclude=migrations
        black --check src/
        isort --check-only src/
    
    - name: Run type checking
      run: |
        mypy src/
    
    - name: Run security checks
      run: |
        bandit -r src/ -x tests/
        safety check
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: test
      run: |
        pytest tests/ --cov=src/ --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [patient-portal, clinician-portal, admin-portal]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/frontend/${{ matrix.app }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd src/frontend/${{ matrix.app }}
        npm ci
    
    - name: Run linting
      run: |
        cd src/frontend/${{ matrix.app }}
        npm run lint
    
    - name: Run type checking
      run: |
        cd src/frontend/${{ matrix.app }}
        npm run type-check
    
    - name: Run tests
      run: |
        cd src/frontend/${{ matrix.app }}
        npm run test:coverage
    
    - name: Run accessibility tests
      run: |
        cd src/frontend/${{ matrix.app }}
        npm run test:a11y
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./src/frontend/${{ matrix.app }}/coverage/lcov.info
        flags: frontend-${{ matrix.app }}

  # Infrastructure Validation
  terraform-validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive infrastructure/
    
    - name: Terraform Validate
      run: |
        cd infrastructure/terraform/environments/dev
        terraform init -backend=false
        terraform validate
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-results.sarif

  # Build and Push Images
  build-and-push:
    needs: [security-scan, backend-test, frontend-test, terraform-validate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev
    
    - name: Build Backend Image
      run: |
        docker build -t us-central1-docker.pkg.dev/$PROJECT_ID/aivida-images/backend:$GITHUB_SHA \
          --target production .
    
    - name: Push Backend Image
      run: |
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/aivida-images/backend:$GITHUB_SHA
    
    - name: Build Frontend Images
      run: |
        for app in patient-portal clinician-portal admin-portal; do
          cd src/frontend/$app
          docker build -t us-central1-docker.pkg.dev/$PROJECT_ID/aivida-images/$app:$GITHUB_SHA .
          docker push us-central1-docker.pkg.dev/$PROJECT_ID/aivida-images/$app:$GITHUB_SHA
          cd ../../..
        done

  # Deploy to Development
  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
    
    - name: Deploy to Kubernetes
      run: |
        cd infrastructure/kubernetes
        envsubst < deployments/backend-deployment.yaml | kubectl apply -f -
        envsubst < services/backend-service.yaml | kubectl apply -f -
        kubectl rollout status deployment/backend-deployment
    
    - name: Run Health Checks
      run: |
        kubectl wait --for=condition=ready pod -l app=backend --timeout=300s
        kubectl get pods -l app=backend

  # Deploy to Production
  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Deploy Infrastructure
      run: |
        cd infrastructure/terraform/environments/prod
        terraform init
        terraform plan -out=tfplan
        terraform apply tfplan
    
    - name: Deploy Application
      run: |
        gcloud container clusters get-credentials aivida-gke-prod --zone us-central1
        cd infrastructure/kubernetes
        envsubst < deployments/backend-deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/backend-deployment
    
    - name: Run Smoke Tests
      run: |
        ./scripts/deployment/smoke-tests.sh

  # Security Compliance Check
  compliance-check:
    needs: deploy-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run HIPAA Compliance Checks
      run: |
        ./scripts/security/hipaa-compliance-check.sh
    
    - name: Generate Compliance Report
      run: |
        ./scripts/security/generate-compliance-report.sh
    
    - name: Upload Compliance Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.html
